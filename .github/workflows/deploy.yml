name: Build, publish, and deploy Frontend Docker image (ECR) to EC2

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        run: |
          docker build -t argo-repo .
      
      - name: Tag Docker image
        run: |
          docker tag argo-repo:latest 879602785537.dkr.ecr.ap-southeast-1.amazonaws.com/argo-repo:latest
      
      - name: Push Docker image to Amazon ECR
        run: |
          docker push 879602785537.dkr.ecr.ap-southeast-1.amazonaws.com/argo-repo:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This ensures the deploy job runs after the build job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Deploy code to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT}}
          script: |
            # Export AWS credentials (required if EC2 doesn't have an IAM role)
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_DEFAULT_REGION=ap-southeast-1

            # Verify identity (debug)
            aws sts get-caller-identity

            # Login to ECR
            aws ecr get-login-password --region ap-southeast-1 \
              | docker login --username AWS --password-stdin 879602785537.dkr.ecr.ap-southeast-1.amazonaws.com

              # Pull the latest image
            sudo docker pull 879602785537.dkr.ecr.ap-southeast-1.amazonaws.com/argo-repo:latest

            # Stop and remove old container if exists
            sudo docker stop frontend || true
            sudo docker rm frontend || true

            # Run new container
            sudo docker run -d --name frontend -p 3000:3000 879602785537.dkr.ecr.ap-southeast-1.amazonaws.com/argo-repo:latest